=====
C Api
=====

This is the technical documentation of the C api, compatible with ctypes. This
API is an intermediate layer between the C++ library and Python. The python
bindings use this API directly via ctypes.

Context
-------

Context is a singleton object that mantains Qt5 application instance in memory
and exposes some QtWebKit configuration options.

The current API is incomplete and in the near future it will expose lots of
configuration options for the WebKit engine.

.. c:function:: void* ph_context_init()

    :rtype: pointer to a Context instance.

    This method returns a new Context instance. Context is a singleton, and if
    you repeatedly call this method, it always returns a pointer to the same
    object.


.. c:function:: void ph_context_free()

    Destroy a current instance of Context. If you call this method repeatedly,
    the behavior is unspecified.


.. c:function:: void ph_context_clear_memory_cache()

    Clears the memory used by webkit for the current thread.

.. c:function:: void ph_context_set_object_cache_capacity(int cacheMinDeadCapacity, int cacheMaxDead, int totalCapacity)

    Specifies the capabilities of the memory cache for dead objects such as
    stylesheets or scripts.

    :param int cacheMinDeadCapacity: specifies the minimum number of bytes that dead objects should consume when the cache is under pressure.
    :param int cacheMaxDead: is the maximum number of bytes that dead objects should consume when the cache is not under pressure.
    :param int totalCapacity: specifies the maximum number of bytes that the cache should consume overall.


.. c:function:: void ph_context_set_max_pages_in_cache(int num)

    Sets the maximum number of pages to hold in the memory page cache to pages.

    :param int num: number of pages to hold in the memory.

.. c:function:: char* ph_context_get_all_cookies()

    Returns a cookies array with all the available cookies in a current
    cookiejar singleton, encoded as JSON.

.. c:function:: void ph_context_set_cookies(const char *cookies)

    Add or overwrite cookies on the current cookiejar.

.. c:function:: void ph_context_clear_cookies()

    Clear all cookies available in a current cookiejar instance.

.. c:function:: void ph_context_set_boolean_config(int key, int value)

    Set WebKit configuration parameter.

.. c:function:: void ph_context_set_int_config(int key, int value)

    Set WebKit configuration parameter.

.. c:function:: int32_t ph_context_get_boolean_config(int key)

    Get WebKit configuration parameter value.

.. c:function:: int32_t ph_context_get_int_config(int key)

    Get WebKit configuration parameter value.

Web Page
--------

This api exposes a **web page** and its frames functionality.

.. c:function:: void* ph_page_create()

    Create a new instance of a Page object and returns its pointer.

    :rtype: pointer to a Page object instance.


.. c:function:: void ph_page_free(void *page)

    Destroy a Page instance and frees the memory used by it.

    :param void* page: Page instance pointer returned by :c:func:`ph_page_create`

.. c:function:: void ph_page_set_viewpoint_size(void *page, int x, int y)

    Set view point size to a page.

.. c:function:: char *ph_page_get_cookies(void *page)

    Get the cookies generated by the page.

.. c:function:: void ph_page_set_initial_cookies(void *page, const char *cookies)

    Set initial cookies to the page.

.. c:function:: int32_t ph_page_load(void *page, char *url)

    Load contents for a current page.

.. c:function:: int32_t ph_page_is_loaded(void *page)

    Checks if the Page is loaded.

.. c:function:: char* ph_page_get_requested_urls(void *page)

    Get a list of URLs requested in background when the page is loaded. The
    result is encoded as JSON.

.. c:function:: char* ph_page_get_reply_by_url(void *page, const char *url)

    Get downloaded data from one of the background requests.

.. c:function:: void* ph_page_main_frame(void *page)

    Get main frame from Page.

.. c:function:: void ph_frame_free(void *frame)

    Release a frame memory.

.. c:function:: char* ph_frame_to_html(void *frame)

    Get frame content as HTML.

.. c:function:: char* ph_frame_evaluate_javascript(void *frame, char* js)

    Evaluate JavaScript in a current frame and return its result as string.

.. c:function:: void* ph_frame_capture_image(void *frame, const char *format, int quality)
.. c:function:: void ph_image_free(void *image)
.. c:function:: int64_t ph_image_get_size(void* image)
.. c:function:: const char* ph_image_get_format(void* image)
.. c:function:: void ph_image_get_bytes(void *image, void *buffer, int64_t size)
.. c:function:: void* ph_frame_find_first(void *frame, const char *selector)
.. c:function:: void* ph_frame_find_all(void *frame, const char *selector)
.. c:function:: void* ph_webcollection_get_webelement(void *collection,  int32_t index)
.. c:function:: void* ph_webelement_find_all(void *element, const char *selector)
.. c:function:: void* ph_webelement_take_from_document(void *element)
.. c:function:: void* ph_webelement_previous(void *element)
.. c:function:: void* ph_webelement_next(void *element)
.. c:function:: void ph_webcollection_free(void *collection)
.. c:function:: void ph_webelement_free(void *element)
.. c:function:: char* ph_webelement_tag_name(void *element)
.. c:function:: char* ph_webelement_inner_html(void *element)
.. c:function:: char* ph_webelement_inner_text(void *element)
.. c:function:: char* ph_webelement_get_classes(void *element)
.. c:function:: char* ph_webelement_get_attnames(void *element)
.. c:function:: char* ph_webelement_get_attr(void *element, const char *attrname)
.. c:function:: int32_t ph_webcollection_size(void *collection)
.. c:function:: int32_t ph_webelement_has_class(void *element, const char *classname)
.. c:function:: int32_t ph_webelement_has_attr(void *element, const char *attrname)
.. c:function:: int32_t ph_webelement_has_attrs(void *element)
.. c:function:: int32_t ph_webelement_is_null(void *element)
.. c:function:: void ph_webelement_remove_attr(void *element, const char *attrname)
.. c:function:: void ph_webelement_add_class(void *element, const char *classname)
.. c:function:: void ph_webelement_set_attr(void *element, const char *attrname, const char *value)
.. c:function:: void ph_webelement_append_html(void *element, const char *htmldata)
.. c:function:: void ph_webelement_append_element(void *element, void *elementement)
.. c:function:: void ph_webelement_append_html_after(void *element, const char *htmldata)
.. c:function:: void ph_webelement_append_element_after(void *element, void *elementement)
.. c:function:: void ph_webelement_replace_with_html(void *element, const char *htmldata)
.. c:function:: void ph_webelement_replace_with_element(void *element, void *elementement)
.. c:function:: void ph_webelement_remove_all_child_elements(void *element)
.. c:function:: void ph_webelement_remove_from_document(void *element)
.. c:function:: void ph_webelement_wrap_with_html(void *element, const char *htmldata)
.. c:function:: void ph_webelement_wrap_with_element(void *element, void *elementement)
